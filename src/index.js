import * as PIXI from 'pixi.js'import { IMAGES, CONFIG } from './constants'import { keyboard } from './keyboard'import { Asteroid } from './entity/Asteroid'import { Bullet } from './entity/Bullet'let Sprite = PIXI.Spriteconst canvas = document.getElementById('appCanvas')// create applicationconst app = new PIXI.Application({    view: canvas,    width: CONFIG.APP_WIDTH,    height: CONFIG.APP_HEIGHT})// create new loaderconst loader = new PIXI.Loader()// get image constantsconst { ASTEROID, BACKGROUND, SPACESHIP } = IMAGES// load and declare spritesloader.add([ASTEROID, BACKGROUND, SPACESHIP]).load(setup)let asteroid, player// bullet listlet bullets = []// declare game statelet state// declare logical variableslet bulletCooldown = 0function setup(loader, resources) {    // create player's rocket    player = new Sprite(resources[SPACESHIP].texture)    player.position.set(CONFIG.APP_WIDTH / 2 - player.width / 2, CONFIG.APP_HEIGHT - player.height - 20)    player.vx = 0    setupUserInput(player)    app.stage.addChild(player)    // create asteroid from loaded texture    asteroid = new Asteroid(resources[ASTEROID].texture, CONFIG.APP_HEIGHT - player.height - 40)    app.stage.addChild(asteroid)    // set the game state    state = playState    // start the game loop    app.ticker.add(delta => update(delta))}function update(delta) {    state(delta)}function playState() {    // asteroid movement    asteroid.x += asteroid.vx    asteroid.y += asteroid.vy    // bullet movement    bullets.forEach((bullet) => {        bullet.y += bullet.vy    })    // player movement    let nextX = player.x + player.vx    // check if player doesn't go outside of the canvas    if (nextX < 0 || (nextX + player.width) > CONFIG.APP_WIDTH){        player.vx = 0    }    player.x += player.vx    // bullet cooldown countdown    bulletCooldown -= app.ticker.deltaMS}function finishedState() {}function setupUserInput(player) {    // set arrow keys to left and right commands    let left = keyboard('ArrowLeft'),        right = keyboard('ArrowRight'),        space = keyboard(' ')    const { PLAYER_SPEED } = CONFIG    // on left arrow press, set player's velocity to moving to the left    left.press = () => {        player.vx = -PLAYER_SPEED    }    // when left arrow is released and right isn't down, stop movement    left.release = () => {        if (right.isDown) {            player.vx = PLAYER_SPEED        } else {            player.vx = 0        }    }    // do the same thing for right arrow press    right.press = () => {        player.vx = PLAYER_SPEED    }    right.release = () => {        if (left.isDown) {            player.vx = -PLAYER_SPEED        } else {            player.vx = 0        }    }    space.press = () => {        if (bulletCooldown <= 0) {            // draw bullet from graphics            let bullet = new Bullet(player.x + player.width / 2, player.y)            bullets.push(bullet)            app.stage.addChild(bullet)            bulletCooldown = CONFIG.BULLET_COOLDOWN        }    }}